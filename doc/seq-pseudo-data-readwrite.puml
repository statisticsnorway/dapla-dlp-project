@startuml
hide footbox

' Participants

participant "Notebook" as Notebook
participant "spark-plugin" as SparkPlugin
participant "spark-service" as SparkService
participant "noterepo-service" as NoterepoService
participant "catalog-service" as CatalogService
participant "auth-service" as AuthService
participant "dlp-secret-service" as SecretService
database "GCS" as GCS

' Write (and pseudonymize) data
note left of SparkPlugin
    ns='/path/to/data'
    options={
        pseudoConfig: {
            {col1={func1, key='somekey'},
            {col2={func2, key='anotherkey'}
        }
    }
end note

Notebook->SparkPlugin: write(ns, options)

SparkPlugin->SparkService:

activate SparkService
SparkService->NoterepoService: lookup(ns)
NoterepoService-->SparkService: datasetId
SparkService->CatalogService: getMetadata(datasetId)
CatalogService-->SparkService: (dataLocation, valuation, state, pseudoConfig, etc)
SparkService->SecretService: getPseudoKeys()
SecretService-->SparkService:
SparkService->CatalogService: createOrUpdate
SparkService->AuthService: canAccess(ns, options)
AuthService-->SparkService:
SparkService-->SparkPlugin
deactivate SparkService

note over SparkPlugin: pseudo-lib
SparkPlugin->SparkPlugin: lib.applyPseudo(data, pseudoConfig)

SparkPlugin->GCS: write data
activate GCS
GCS-->SparkPlugin:
deactivate GCS
SparkPlugin->SparkService:
activate SparkService
SparkService->SecretService: createOrUpdate key
SparkService->CatalogService: createOrUpdate
SparkService-->SparkPlugin
deactivate SparkService
SparkPlugin-->Notebook
====

' Read depseudonymized data

note left of SparkPlugin
    ns='/path/to/data'
    options={depseudonymize=true}
end note

Notebook->SparkPlugin: read(ns, options)
SparkPlugin->SparkService:
activate SparkService
SparkService->NoterepoService: lookup(ns)
NoterepoService-->SparkService: datasetId
SparkService->CatalogService: getMetadata(datasetId)
CatalogService-->SparkService: (dataLocation, valuation, state, pseudoConfig, etc)
SparkService->AuthService: canAccess(ns, options)
AuthService-->SparkService:
SparkService->SecretService: getPseudoKeys()
SecretService-->SparkService:
SparkService-->SparkPlugin: dataLocation, pseudoConfig
deactivate SparkService

activate SparkPlugin
SparkPlugin->GCS: loadData(dataLocation)
GCS->SparkPlugin: dataframe

note over SparkPlugin: pseudo-lib
SparkPlugin->SparkPlugin: lib.removePseudo(data, pseudoConfig)
SparkPlugin-->Notebook

@enduml